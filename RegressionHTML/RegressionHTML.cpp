// RegressionHTML.cpp : Defines the entry point for the console application.
// Copyright (c) 2016 Nonki Takahashi.  The MIT License.
// Version 0.1
//
/**
* @author Nonki Takahashi
* @version 0.1
*/

#include "stdafx.h"
#include <iostream>
#include "../binarymath/bvector.h"
#include "../binarymath/bmatrix.h"
using namespace std;

int _tmain(int argc, _TCHAR* argv[])
{
	cout << "<!DOCTYPE html>" << endl;
	cout << "<html>" << endl;
	cout << "<head>" << endl;
	cout << "<title>RegressionHTML 0.1</title>" << endl;
	cout << "<script type=\"text/x-mathjax-config\">" << endl;
	cout << "  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]}});" << endl;
	cout << "</script>" << endl;
	cout << "<script type=\"text/javascript\"" << endl;
	cout << "  src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">" << endl;
	cout << "</script>" << endl;
	cout << "<style type=\"text/css\">" << endl;
	cout << "  @import url(http://fonts.googleapis.com/earlyaccess/notosansjapanese.css);" << endl;
	cout << "  body {" << endl;
	cout << "    font-family: 'Noto Sans Japanese';" << endl;
	cout << "    font-size: 0.9rem;" << endl;
	cout << "  }" << endl;
	cout << "  .code{" << endl;
	cout << "    font-family: 'Courier New', monospace;" << endl;
	cout << "  }" << endl;
	cout << "  .result{" << endl;
	cout << "    width: 500px;" << endl;
	cout << "    padding: 10px;" << endl;
	cout << "    margin: 10px;" << endl;
	cout << "    color: black;" << endl;
	cout << "    background-color: white;" << endl;
	cout << "    border-color: lightgray;" << endl;
	cout << "    border-style: solid;" << endl;
	cout << "    border-width: 1px" << endl;
	cout << "  }" << endl;
	cout << "</style>" << endl;
	cout << "</head>" << endl;
	cout << "<body>" << endl;
	cout << endl;
	cout << "<h1>RegressionHTML 0.1</h1>" << endl;
	cout << "<h2>CBVector</h2>" << endl;
	CBVector a(4, "a");
	a.setValue(3, 1);
	a.setValue(4, 1);
	cout << "<div class=\"result\">" << endl;
	cout << "<p>コンストラクタ <span class=\"code\">CBVector a(4, \"a\");</span><br>" << endl;
	cout << "<span class=\"code\">&nbsp;a.setValue(3, 1);</span><br>" << endl;
	cout << "<span class=\"code\">&nbsp;a.setValue(4, 1);</span>" << endl;
	cout << "$$\\boldsymbol{a}=" << a.to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	int v[] = { 0, 1, 0, 1 };
	CBVector b(4, v, "b");
	cout << "<div class=\"result\">" << endl;
	cout << "<p>コンストラクタ <span class=\"code\">int v[] = { 0, 1, 0, 1 };</span><br>" << endl;
	cout << "<span class=\"code\">&nbsp;CBVector b(4, v, \"b\");</span>" << endl;
	cout << "$$\\boldsymbol{b}=" << b.to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "<p>要素 <span class=\"code\">a.getValue(3)</span>" << endl;
	cout << "$$(\\boldsymbol{a})_3=" << to_string(a.getValue(3)) << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "<p>論理和 <span class=\"code\">a.or(b)</span>" << endl;
	cout << "$$\\boldsymbol{a} \\vee \\boldsymbol{b}=" << a.or(b).to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "<p>論理積 <span class=\"code\">a.and(b)</span>" << endl;
	cout << "$$\\boldsymbol{a} \\wedge \\boldsymbol{b}=" << a.and(b).to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "<p>絶対値 <span class=\"code\">a.abs()</span></p>" << endl;
	cout << "$$\\left| \\boldsymbol{ a } \\right|=" << to_string(a.abs()) << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "<p>反転 <span class=\"code\">a.inv()</span>" << endl;
	cout << "$$\\overline{\\boldsymbol{a}}=" << a.inv().to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "<p>転置 <span class=\"code\">a.tran()</span>" << endl;
	cout << "$$^ta=" << a.tran().to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "<p>論理差 <span class=\"code\">a.diff(b)</span>" << endl;
	cout << "$$\\boldsymbol{a} - \\boldsymbol{b}=" << a.diff(b).to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "<p>排他的論理和 <span class=\"code\">a.xor(b)</span>" << endl;
	cout << "$$\\boldsymbol{a} \\oplus \\boldsymbol{b}=" << a.xor(b).to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "<p>スカラとの積 <span class=\"code\">a.mul(0)</span>" << endl;
	cout << "$$0 \\boldsymbol{a}=" << a.mul(0).to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "<p>ドット積 <span class=\"code\">a.dot(b)</span>" << endl;
	cout << "$$\\boldsymbol{a} \\cdot \\boldsymbol{b} = \\; ^t\\boldsymbol{a} \\boldsymbol{b}=" << to_string(a.dot(b)) << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "<p>クロス積 <span class=\"code\">a.cross(b)</span>" << endl;
	cout << "$$\\boldsymbol{a} \\times \\boldsymbol{b} = \\boldsymbol{a} \\; ^t\\boldsymbol{b}=" << endl << a.cross(b).to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << endl;
	cout << "<h2>CBMatrix</h2>" << endl;
	CBMatrix A(4, 4);
	A.setValue(1, 4, 1);
	A.setValue(2, 4, 1);
	A.setValue(3, 4, 1);
	A.setValue(4, 4, 1);
	cout << "<div class=\"result\">" << endl;
	cout << "<p>コンストラクタ <span class=\"code\">CBMatrix A(4, 4);</span><br>" << endl;
	cout << "<span class=\"code\">&nbsp;A.setValue(1, 4, 1);</span><br>" << endl;
	cout << "<span class=\"code\">&nbsp;A.setValue(2, 4, 1);</span><br>" << endl;
	cout << "<span class=\"code\">&nbsp;A.setValue(3, 4, 1);</span><br>" << endl;
	cout << "<span class=\"code\">&nbsp;A.setValue(4, 4, 1);</span>" << endl;
	cout << "$$A=" << A.to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	CBMatrix B(4, 4);
	B.setValue(1, 4, 1);
	B.setValue(2, 3, 1);
	B.setValue(3, 2, 1);
	B.setValue(4, 1, 1);
	cout << "<div class=\"result\">" << endl;
	cout << "<p>コンストラクタ <span class=\"code\">CBMatrix B(4, 4);</span><br>" << endl;
	cout << "<span class=\"code\">&nbsp;B.setValue(1, 4, 1);</span><br>" << endl;
	cout << "<span class=\"code\">&nbsp;B.setValue(2, 3, 1);</span><br>" << endl;
	cout << "<span class=\"code\">&nbsp;B.setValue(3, 2, 1);</span><br>" << endl;
	cout << "<span class=\"code\">&nbsp;B.setValue(4, 1, 1);</span>" << endl;
	cout << "$$B=" << B.to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "<p>要素 <span class=\"code\">A.getValue(4, 3)</span>" << endl;
	cout << "$$(A)_{4,3}=" << to_string(A.getValue(4, 3)) << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "<p>論理和 <span class=\"code\">A.or(B)</span>" << endl;
	cout << "$$A \\vee B=" << A.or(B).to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "<p>論理積 <span class=\"code\">A.and(B)</span>" << endl;
	cout << "$$A \\wedge B=" << A.and(B).to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "<p>絶対値 <span class=\"code\">A.abs()</span>" << endl;
	cout << "$$\\left| A \\right|=" << to_string(A.abs()) << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "<p>反転 <span class=\"code\">A.inv()</span>" << endl;
	cout << "$$\\overline{A}=" << A.inv().to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "<p>転置 <span class=\"code\">A.tran()</span>" << endl;
	cout << "$$^tA=" << A.tran().to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "<p>論理差 <span class=\"code\">a.diff(b)</span>" << endl;
	cout << "$$A - B=" << A.diff(B).to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "<p>排他的論理和 <span class=\"code\">a.xor(b)</span>" << endl;
	cout << "$$A \\oplus B=" << A.xor(B).to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "<p>積 <span class=\"code\">A.mul(B)</span>" << endl;
	cout << "$$A B=" << A.mul(B).to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	int v2[] = { 0, 0, 1, 1 };
	CBVector c(4, v2, "c");
	cout << "<div class=\"result\">" << endl;
	cout << "<p>コンストラクタ <span class=\"code\">int v2[] = { 0, 0, 1, 1 };</span><br>" << endl;
	cout << "<span class=\"code\">&nbsp;CBVector c(4, v2, \"c\");</span>" << endl;
	cout << "$$\\boldsymbol{c}=" << c.to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << "<div class=\"result\">" << endl;
	cout << "ベクトルとの積 <span class=\"code\">A.mul(c)</span>" << endl;
	cout << "$$A \\boldsymbol{c}=" << A.mul(c).to_TeX() << "$$</p>" << endl;
	cout << "</div>" << endl;
	cout << endl;
	cout << "</body>" << endl;
	cout << "</html>" << endl;
	system("pause");
	return 0;
}
